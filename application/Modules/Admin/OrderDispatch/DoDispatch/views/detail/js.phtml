<?php
/**
 * @copyright Copyright (c) Miroslav Marek <mirek.marek@web-jet.cz>
 * @license EUPL 1.2  https://eupl.eu/1.2/en/
 * @author Miroslav Marek <mirek.marek@web-jet.cz>
 */
namespace JetApplicationModule\Admin\OrderDispatch\DoDispatch;


use Jet\Http_Request;
use Jet\MVC_View;
use Jet\Tr;use JetApplication\OrderDispatch;


/**
 * @var MVC_View   $this
 * @var OrderDispatch $dispatch
 */

$dispatch = $this->getRaw('dispatch');

$is_editable = $dispatch->isEditable();

$packet_default_params = [];

?>
<script type="text/javascript">
	const Packets = {
		packet_default_params: <?=json_encode($dispatch->getCarrierService()?->getAvailablePackaging()??[])?>,

		setPacketDefaults: ( form, packet_type ) => {
			const settings = Packets.packet_default_params[packet_type];
	
			const setDimensions = function( input_name, settings_key ) {
				if(form.elements[input_name]) {
					if(settings[settings_key]) {
						form.elements[input_name].value = settings[settings_key]*1;
					} else {
						form.elements[input_name].value = '';
					}
				}
			};

			const setEditable = function( input_name, settings_key ) {
				if(form.elements[input_name]) {
					form.elements[input_name].readOnly = !settings[settings_key];
				}
			};

			const setMin = function( input_name, settings_key ) {
				if(form.elements[input_name]) {
					if(settings[settings_key]) {
						form.elements[input_name].min = settings[settings_key];
					} else {
						form.elements[input_name].min = null;
					}
				}
			};

			const setMax = function( input_name, settings_key ) {
				if(form.elements[input_name]) {
					if(settings[settings_key]) {
						form.elements[input_name].max = settings[settings_key];
					} else {
						form.elements[input_name].max = null;
					}
				}
			};

			setDimensions('size_l', 'default_l');
			setDimensions('size_h', 'default_h');
			setDimensions('size_w', 'default_w');
			setDimensions('weight', 'default_weight');

			setEditable('size_l', 'l_editable');
			setEditable('size_h', 'h_editable');
			setEditable('size_w', 'w_editable');
			setEditable('weight', 'weight_editable');

			setMin('size_l', 'min_l');
			setMin('size_h', 'min_h');
			setMin('size_w', 'min_w');
			setMin('weight', 'min_weight');


			setMax('size_l', 'max_l');
			setMax('size_h', 'max_h');
			setMax('size_w', 'max_w');
			setMax('weight', 'max_weight');
			
		},

		addPacket: () => {
			JetAjaxForm.submit('add_packet_form', {
				showProgressIndicator: () => {},
				hideProgressIndicator: () => {},
				onProgress: () => {},
				onSuccess: () => {
					setTimeout(function() {
						const form = document.getElementById('add_packet_form');

						for( let c=0; c<form.elements.length; c++) {
							if(form.elements[c].type=='hidden' || form.elements[c].type=='button') {
								continue;
							}

							form.elements[c].focus();
							break;
						}
						
					}, 10);
				}
			});
		},
		
		saveAdditionalConsignmentParameters: () => {
			JetAjaxForm.submit('additional_consignment_parameters_form', {
				showProgressIndicator: () => {},
				hideProgressIndicator: () => {},
				onProgress: () => {},
				onSuccess: () => {}
			});

		},

		onAddPackageKeyPress: () => {
			const code = window['event']['code'];
			
			if(
				code=='Tab' ||
				code=='Enter' ||
				code=='NumpadEnter'
			) {
				Packets.addPacket();
				window['event'].stopPropagation();
			}
		},

		savePacket: ( packet_id ) => {
			JetAjaxForm.submit('packet_form_'+packet_id, {
				showProgressIndicator: () => {},
				hideProgressIndicator: () => {},
				onProgress: () => {}
			});
		},

		removePacket: ( packet_id ) => {
			JetAjaxForm.submit('remove_packet_form_'+packet_id);
		},
		
	};
	
	const Notes = {
		saveOurNoteForm: () => {
			JetAjaxForm.submit('our_note_form');
		},
		saveRecipientNoteForm: () => {
			JetAjaxForm.submit('recipient_note_form');
		},
		saveDriverNoteForm: () => {
			JetAjaxForm.submit('driver_note_form');
		}
	};
	
	const Control = {
		init: () => {
			document.addEventListener('keydown', e => {
				if (e.altKey && e.key === 'n') {
					Control.nextPending();
				}
				if (e.altKey && e.key === 's') {
					Control.save();
				}
				if (e.shiftKey && e.key === 'F') {
					e.stopPropagation();
					e.preventDefault();
					Search.focus();
				}
			});
		},
		
		nextPending: async ()=> {

			const _resp = await fetch('<?=Http_Request::currentURI(['action' =>'goto_next_pending'])?>' );
			const resp = await _resp.json();

			if(resp['URL']) {
				location = resp['URL'];
				return;
			}

			if(resp['done']) {
				alert('<?=Tr::_('Everything done ðŸ˜Š')?>');
			}
		},
		
		save: () => {
			const save_btn = document.getElementById('save_button');
			if(save_btn) {
				save_btn.click();
			}
		}
		
	};
	
	Control.init();
	
	const Search = {
		fetch: null,
		search: ( q ) => {
			fetch( '<?=Http_Request::currentURI(['action'=>'search'])?>&q='+encodeURIComponent(q) ).then( async (response) => {
				if(!response.ok) {
					return;
				}
				
				const resp = await response.json();
				
				if(resp['found']) {
					location = resp['URL'];
				}
			})
		},

		focus: () => {
			document.getElementById('search_input').focus();
			document.getElementById('search_input').value = '';
		}
	};
	
	
</script>

<style>
	.packages-form-row {
		display: grid;
		align-items: center;
		grid-template-columns: 30px 200px 50px 120px 50px 120px 50px 120px 50px 120px 100px 350px 1fr;
		gap: 10px;
		margin-bottom: 5px;
		padding-bottom: 5px;
		border-bottom: 1px solid #c9c9c9;
	}
	
	.packages-field {
		display: grid;
		align-items: center;
		gap: 5px;
		grid-template-columns: 1fr 30px ;
	}

	.packages-field input {
		width: 100%;
	}
</style>