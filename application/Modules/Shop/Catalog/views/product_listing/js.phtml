<?php
namespace JetApplicationModule\Shop\Catalog;

use Jet\MVC_View;
use JetApplication\ProductListing;

/**
 * @var MVC_View $this
 * @var ProductListing $listing
 */

$listing = $this->getRaw('listing');

?>
<script type="text/javascript">
	
	const listing = {
		optional_URL_parameter: <?=json_encode($this->getString('optional_URL_parameter'))?>,
		
		URL: [],
		filter: {},

		filterToURL: function() {
			listing.filter.basic.toURL();
			listing.filter.options.toURL();
			listing.filter.bool.toURL();
			listing.filter.numbers.toURL();
			listing.filter.brands.toURL();
			listing.filter.price.toURL();

			if(listing.optional_URL_parameter) {
				listing.URL.push( listing.optional_URL_parameter );
			}
		},
		
		cancelFilter: function () {
			listing.filter.basic.cancelAll();
			listing.filter.options.cancelAll();
			listing.filter.bool.cancelAll();
			listing.filter.numbers.cancelAll();
			listing.filter.brands.cancelAll();
			listing.filter.price.cancelAll();
		},
		
		sorterToURL: function ( sorter ) {
			if(!sorter) {
				sorter = document.getElementById('product_listing_selected_sorter').dataset.key;
			}
			
			listing.URL.push('sort='+sorter);
		},

		submitFilter: function () {
			listing.URL = [];
			listing.filterToURL();
			listing.sorterToURL();
			
			listing._apply( function ( response ) {
				document.getElementById('product_listing_area').innerHTML = response;
			} );
		},
		
		page: function (no) {
			listing.URL = [];
			listing.filterToURL();
			listing.sorterToURL();
			listing.URL.push('p='+no);

			listing._apply( function ( response ) {
				document.getElementById('product_listing_area').innerHTML = response;
				
				
				$([document.documentElement, document.body]).animate({
					scrollTop: $("#product_listing_list").offset().top
				}, 500);
			} );
			
		},
		
		sort: function ( sorter ) {
			listing.URL = [];
			listing.filterToURL();
			listing.sorterToURL( sorter );

			listing._apply( function ( response ) {
				document.getElementById('product_listing_area').innerHTML = response;


				$([document.documentElement, document.body]).animate({
					scrollTop: $("#product_listing_list").offset().top
				}, 500);
			} );
			
		},
		
		_apply: function( onLoad ) {
			
			let URL = '?'+listing.URL.join('&');
			
			let xhr = new XMLHttpRequest();

			xhr.open('GET', URL);
			xhr.setRequestHeader('listing-ajax', '1');
			xhr.send();

			xhr.onreadystatechange = function() {
				if (xhr.readyState == XMLHttpRequest.DONE) {
					onLoad( xhr.responseText );

					listing.saveHistory(URL);
				}
			}
		},
		
		saveHistory: function (URL) {
			window.history.pushState(
				{
					listing_area: document.getElementById('product_listing_area').innerHTML
				},"", URL);
			
		},
		
		init: function()
		{
			window.onpopstate = function(e){
				document.getElementById('product_listing_area').innerHTML = e.state.listing_area;
			};
			
			listing.saveHistory( location.href );
		}
		
	};
	
	listing.filter.basic = {
		toURL: function () {
			if(document.getElementById('lf-bf-in_stock').checked) {
				listing.URL.push('in-stock');
			}
			if(document.getElementById('lf-bf-has_discount').checked) {
				listing.URL.push('has-discount');
			}
		},
		
		cancel: function ( flag ) {
			document.getElementById('lf-bf-'+flag).checked = false;
			listing.submitFilter();
		},
		
		cancelAll: function () {
			document.getElementById('lf-bf-in_stock').checked = false;
			document.getElementById('lf-bf-has_discount').checked = false;
		}
	};
	
	listing.filter.options = {
		toURL: function () {
			let options = {};
			let options_activated = false;
			let _options = document.getElementsByClassName('lf-option');
			Array.from(_options).forEach(
				function(element) {
					if(element.checked) {
						let property_id = element.dataset['property'];
						if(!options[property_id]) {
							options[property_id] = [];
						}
						options[property_id].push( element.value );
						options_activated = true;
					}
				}
			);

			if(options_activated) {
				for( let property_id in options ) {
					listing.URL.push( 'o['+property_id+']='+options[property_id].join(',') );
				}
			}

		},
		
		cancel: function (id) {
			let _options = document.getElementsByClassName('lf-option');
			Array.from(_options).forEach(
				function(element) {
					if(element.value==id) {
						element.checked = false;
					}
				}
			);
			
			listing.submitFilter();
		},

		cancelAll: function (id) {
			let _options = document.getElementsByClassName('lf-option');
			Array.from(_options).forEach(
				function(element) {
					element.checked = false;
				}
			);
		}
		
		
	};
	
	listing.filter.bool = {
		toURL: function () {
			let bools = [];

			let _bools = document.getElementsByClassName('lf-bool');
			Array.from(_bools).forEach(
				function(element) {
					if(element.checked) {
						bools.push( element.value );
					}
				}
			);

			if(bools.length) {
				listing.URL.push( 'by='+bools.join(',') );
			}
		},
		
		cancel: function (id) {

			let _bools = document.getElementsByClassName('lf-bool');
			Array.from(_bools).forEach(
				function(element) {
					if(element.value==id) {
						element.checked = false;
					}
				}
			);
			
			listing.submitFilter();
		},
		
		cancelAll: function () {
			let _bools = document.getElementsByClassName('lf-bool');
			Array.from(_bools).forEach(
				function(element) {
					element.checked = false;
				}
			);

		}
		
	};
	
	listing.filter.numbers = {
		toURL: function () {
			let numbers = {};
			let numbers_activated = false;

			let numbers_min = document.getElementsByClassName('lf-number-min');
			Array.from(numbers_min).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					let min = element.dataset['min']*1;
					let s_min = element.value*1;

					if(s_min<=min) {
						return;
					}

					if(!numbers[property_id]) {
						numbers[property_id] = {};
					}
					numbers[property_id]['min']= s_min;
					numbers_activated = true;
				}
			);

			let numbers_max = document.getElementsByClassName('lf-number-max');
			Array.from(numbers_max).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					let max = element.dataset['max']*1;
					let s_max = element.value*1;

					if(s_max>=max) {
						return;
					}

					if(!numbers[property_id]) {
						numbers[property_id] = {};
					}
					numbers[property_id]['max']= s_max;
					numbers_activated = true;
				}
			);

			if(numbers_activated) {
				for( let property_id in numbers ) {
					if(numbers[property_id]['min']!==undefined) {
						listing.URL.push( 'n['+property_id+'][min]='+numbers[property_id]['min'] );
					}
					if(numbers[property_id]['max']!==undefined) {
						listing.URL.push( 'n['+property_id+'][max]='+numbers[property_id]['max'] );
					}
				}
			}

		},
		
		cancel: function ( id ) {

			let numbers_min = document.getElementsByClassName('lf-number-min');
			Array.from(numbers_min).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					if(property_id==id) {
						element.value = element.dataset['min']*1;
					}
				}
			);

			let numbers_max = document.getElementsByClassName('lf-number-max');
			Array.from(numbers_max).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					if(property_id==id) {
						element.value = element.dataset['max'] * 1;
					}
				}
			);

			listing.submitFilter();
		},


		cancelAll: function () {
			let numbers_min = document.getElementsByClassName('lf-number-min');
			Array.from(numbers_min).forEach(
				function(element) {
					element.value = element.dataset['min']*1;
				}
			);

			let numbers_max = document.getElementsByClassName('lf-number-max');
			Array.from(numbers_max).forEach(
				function(element) {
					element.value = element.dataset['max'] * 1;
				}
			);
		}
	};
	
	listing.filter.brands = {
		toURL: function () {
			let _brands = document.getElementsByClassName('lf-brand');
			let brands = [];
			Array.from(_brands).forEach(
				function(element) {
					if(element.checked) {
						brands.push( element.value );
					}
				}
			);
			if(brands.length) {
				listing.URL.push('b='+brands.join(','));
			}
		},
		
		cancel: function ( id ) {
			let _brands = document.getElementsByClassName('lf-brand');
			Array.from(_brands).forEach(
				function(element) {
					if(element.value==id) {
						element.checked = false;
					}
				}
			);

			listing.submitFilter();
		},
		
		cancelAll: function () {
			let _brands = document.getElementsByClassName('lf-brand');
			Array.from(_brands).forEach(
				function(element) {
					element.checked = false;
				}
			);
		}
		
	};
	listing.filter.price = {
		toURL: function () {
			let price = {};
			let price_activated = false;

			let _price_min = document.getElementById('lf-price-min');
			let min = _price_min.dataset['min']*1;
			let s_min = _price_min.value*1;
			if(s_min>min) {
				price['min']= s_min;
				listing.URL.push('p_min='+s_min);
			}



			let _price_max = document.getElementById('lf-price-max');
			let max = _price_max.dataset['max']*1;
			let s_max = _price_max.value*1;
			if(s_max<max) {
				price['max']= s_max;
				listing.URL.push('p_max='+s_max);
			}
		},
		
		cancel: function() {
			let _price_min = document.getElementById('lf-price-min');
			_price_min.value = _price_min.dataset['min']*1;

			let _price_max = document.getElementById('lf-price-max');
			_price_max.value=_price_max.dataset['max']*1;
			listing.submitFilter();
		},
		
		cancelAll: function () {
			listing.filter.price.cancel();
		}
	};
	
	
	
	listing.init();
</script>