<?php
namespace JetApplicationModule\Shop\Catalog;

use Jet\MVC_View;
use JetApplication\ProductListing;

/**
 * @var MVC_View $this
 * @var ProductListing $listing
 */

$listing = $this->getRaw('listing');

?>
<script>
	class DualSlider {
		constructor( slider_node ) {
			this.line_color = '#C6C6C6';
			this.range_color = '#2a0fb0';
			this.thb_width = 24;

			this.formatter = new Intl.NumberFormat( slider_node.dataset['locale'] );


			this.slider_from = slider_node.querySelector('.dual-slider-from');
			this.slider_to = slider_node.querySelector( '.slider-to' );
			this.status_from = slider_node.querySelector( '.dual-slider-status-from' );
			this.status_to = slider_node.querySelector( '.dual-slider-status-to' );
			this.units = '';

			if(slider_node.dataset['units']) {
				this.units = slider_node.dataset['units'];
			}

			if(slider_node.dataset['minDistanceNominal']) {
				this.min_distance_nominal = parseFloat( slider_node.dataset['minDistanceNominal'] );
			} else {
				if(slider_node.dataset['minDistancePercent']) {
					this.min_distance_percent = parseFloat(slider_node.dataset['minDistancePercent']);
				} else {
					this.min_distance_percent = 1;
				}

				this.min_distance_nominal = Math.round( (this.slider_from.max-this.slider_from.min) * (this.min_distance_percent/100) );
			}

			this.slider_from.oninput = () => {
				this.checkFrom();
				this.actualize();
			};
			this.slider_to.oninput = () => {
				this.checkTo();
				this.actualize();
			}

			this.actualize();
		}

		checkFrom() {
			const from = parseFloat(this.slider_from.value);
			const to = parseFloat(this.slider_to.value);

			const max_from = to - this.min_distance_nominal;

			if (from > max_from) {
				this.slider_from.value = max_from;
			}

		}

		checkTo() {
			const from = parseFloat(this.slider_from.value);
			const to = parseFloat(this.slider_to.value);

			const min_to= from + this.min_distance_nominal;

			if( to < min_to ) {
				this.slider_to.value = min_to;
			}

		}

		formatNumber( number ) {
			return this.formatter.format( number )+this.units;
			//return number+this.units;
		}

		actualize() {
			this.status_from.innerHTML = this.formatNumber( this.slider_from.value );
			this.status_to.innerHTML = this.formatNumber( this.slider_to.value );

			const width = this.slider_from.getBoundingClientRect().width;

			const line_color = this.line_color;
			const range_color = this.range_color;
			const thb_width = this.thb_width;

			const from = this.slider_from;
			const to = this.slider_to;

			const min = from.min;
			const max = from.max;
			
			const correction = 0;

			const unit = ( (width-thb_width) / (max-min) );
			
			const position_from = Math.round( (from.value-min) *unit );
			const position_to = Math.round( (to.value-min)*unit );
			
			const left_start = 0;
			const left_end = position_from-correction;

			const between_start = left_end;
			const between_end = position_to;

			const right_start = between_end;
			const right_end = width;

			let background = `linear-gradient(to right,${line_color} ${left_start}px ${left_end}px,${range_color} ${between_start}px ${between_end}px,${line_color} ${right_start}px ${right_end}px`;

			this.slider_to.style.background = background;
		}
	}

</script>


<script>
	
	const listing = {
		optional_URL_parameter: <?=json_encode($this->getString('optional_URL_parameter'))?>,
		
		URL: [],
		filter: {},

		filterToURL: function() {
			listing.filter.basic.toURL();
			listing.filter.options.toURL();
			listing.filter.bool.toURL();
			listing.filter.numbers.toURL();
			listing.filter.brands.toURL();
			listing.filter.price.toURL();

			if(listing.optional_URL_parameter) {
				listing.URL.push( listing.optional_URL_parameter );
			}
		},
		
		cancelFilter: function () {
			listing.filter.basic.cancelAll();
			listing.filter.options.cancelAll();
			listing.filter.bool.cancelAll();
			listing.filter.numbers.cancelAll();
			listing.filter.brands.cancelAll();
			listing.filter.price.cancelAll();
			listing.UI.cancelFilter();
		},
		
		sorterToURL: function ( sorter ) {
			if(!sorter) {
				sorter = document.getElementById('product_listing_selected_sorter').dataset.key;
			}
			
			listing.URL.push('sort='+sorter);
		},

		submitFilter: function () {
			listing.URL = [];
			listing.filterToURL();
			listing.sorterToURL();
			
			listing._apply( function ( response ) {
				document.getElementById('product_listing_area').innerHTML = response;
				listing.UI.renewState();
			} );
		},
		
		page: function (no) {
			listing.URL = [];
			listing.filterToURL();
			listing.sorterToURL();
			listing.URL.push('p='+no);

			listing._apply( function ( response ) {
				document.getElementById('product_listing_area').innerHTML = response;
				listing.UI.renewState();
				
				effects.scrollTo('product_listing_list');
				
			} );
			
		},
		
		sort: function ( sorter ) {
			listing.URL = [];
			listing.filterToURL();
			listing.sorterToURL( sorter );

			listing._apply( function ( response ) {
				document.getElementById('product_listing_area').innerHTML = response;
				listing.UI.renewState();
				
				effects.scrollTo( 'product_listing_list' );
			} );
			
		},
		
		_apply: function( onLoad ) {
			
			let URL = '?'+listing.URL.join('&');
			
			let xhr = new XMLHttpRequest();

			xhr.open('GET', URL);
			xhr.setRequestHeader('Listing-Ajax', '1');
			xhr.send();

			xhr.onreadystatechange = function() {
				if (xhr.readyState == XMLHttpRequest.DONE) {
					onLoad( xhr.responseText );

					listing.saveHistory(URL);
				}
			}
		},
		
		saveHistory: function (URL) {
			window.history.pushState(
				{
					listing_area: document.getElementById('product_listing_area').innerHTML
				},"", URL);

			window.onpopstate = function(e){
				if(e.listing_area){
					document.getElementById('product_listing_area').innerHTML = e.listing_area;
				}
			};
			
			
		},
		
		init: function()
		{
			listing.saveHistory( location.href );
			listing.UI.initSliders();
		}
		
	};
	
	listing.filter.basic = {
		toURL: function () {
			if(document.getElementById('lf-bf-in_stock').checked) {
				listing.URL.push('in-stock');
			}
			if(document.getElementById('lf-bf-has_discount').checked) {
				listing.URL.push('has-discount');
			}
		},
		
		cancel: function ( flag ) {
			document.getElementById('lf-bf-'+flag).checked = false;
			listing.submitFilter();
		},
		
		cancelAll: function () {
			document.getElementById('lf-bf-in_stock').checked = false;
			document.getElementById('lf-bf-has_discount').checked = false;
		}
	};
	
	listing.filter.options = {
		toURL: function () {
			let options = {};
			let options_activated = false;
			let _options = document.getElementsByClassName('lf-option');
			Array.from(_options).forEach(
				function(element) {
					if(element.checked) {
						let property_id = element.dataset['property'];
						if(!options[property_id]) {
							options[property_id] = [];
						}
						options[property_id].push( element.value );
						options_activated = true;
					}
				}
			);

			if(options_activated) {
				for( let property_id in options ) {
					listing.URL.push( 'o['+property_id+']='+options[property_id].join(',') );
				}
			}

		},
		
		cancel: function (id) {
			let _options = document.getElementsByClassName('lf-option');
			Array.from(_options).forEach(
				function(element) {
					if(element.value==id) {
						element.checked = false;
					}
				}
			);
			
			listing.submitFilter();
		},

		cancelAll: function (id) {
			let _options = document.getElementsByClassName('lf-option');
			Array.from(_options).forEach(
				function(element) {
					element.checked = false;
				}
			);
		}
		
		
	};
	
	listing.filter.bool = {
		toURL: function () {
			let bools = [];

			let _bools = document.getElementsByClassName('lf-bool');
			Array.from(_bools).forEach(
				function(element) {
					if(element.checked) {
						bools.push( element.value );
					}
				}
			);

			if(bools.length) {
				listing.URL.push( 'by='+bools.join(',') );
			}
		},
		
		cancel: function (id) {

			let _bools = document.getElementsByClassName('lf-bool');
			Array.from(_bools).forEach(
				function(element) {
					if(element.value==id) {
						element.checked = false;
					}
				}
			);
			
			listing.submitFilter();
		},
		
		cancelAll: function () {
			let _bools = document.getElementsByClassName('lf-bool');
			Array.from(_bools).forEach(
				function(element) {
					element.checked = false;
				}
			);

		}
		
	};
	
	listing.filter.numbers = {
		toURL: function () {
			let numbers = {};
			let numbers_activated = false;

			let numbers_min = document.getElementsByClassName('lf-number-min');
			Array.from(numbers_min).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					let min = element.dataset['min']*1;
					let s_min = element.value*1;

					if(s_min<=min) {
						return;
					}

					if(!numbers[property_id]) {
						numbers[property_id] = {};
					}
					numbers[property_id]['min']= s_min;
					numbers_activated = true;
				}
			);

			let numbers_max = document.getElementsByClassName('lf-number-max');
			Array.from(numbers_max).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					let max = element.dataset['max']*1;
					let s_max = element.value*1;

					if(s_max>=max) {
						return;
					}

					if(!numbers[property_id]) {
						numbers[property_id] = {};
					}
					numbers[property_id]['max']= s_max;
					numbers_activated = true;
				}
			);

			if(numbers_activated) {
				for( let property_id in numbers ) {
					if(numbers[property_id]['min']!==undefined) {
						listing.URL.push( 'n['+property_id+'][min]='+numbers[property_id]['min'] );
					}
					if(numbers[property_id]['max']!==undefined) {
						listing.URL.push( 'n['+property_id+'][max]='+numbers[property_id]['max'] );
					}
				}
			}

		},
		
		cancel: function ( id ) {

			let numbers_min = document.getElementsByClassName('lf-number-min');
			Array.from(numbers_min).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					if(property_id==id) {
						element.value = element.dataset['min']*1;
					}
				}
			);

			let numbers_max = document.getElementsByClassName('lf-number-max');
			Array.from(numbers_max).forEach(
				function(element) {
					let property_id = element.dataset['property'];
					if(property_id==id) {
						element.value = element.dataset['max'] * 1;
					}
				}
			);

			listing.submitFilter();
		},


		cancelAll: function () {
			let numbers_min = document.getElementsByClassName('lf-number-min');
			Array.from(numbers_min).forEach(
				function(element) {
					element.value = element.dataset['min']*1;
				}
			);

			let numbers_max = document.getElementsByClassName('lf-number-max');
			Array.from(numbers_max).forEach(
				function(element) {
					element.value = element.dataset['max'] * 1;
				}
			);
		}
	};
	
	listing.filter.brands = {
		toURL: function () {
			let _brands = document.getElementsByClassName('lf-brand');
			let brands = [];
			Array.from(_brands).forEach(
				function(element) {
					if(element.checked) {
						brands.push( element.value );
					}
				}
			);
			if(brands.length) {
				listing.URL.push('b='+brands.join(','));
			}
		},
		
		cancel: function ( id ) {
			let _brands = document.getElementsByClassName('lf-brand');
			Array.from(_brands).forEach(
				function(element) {
					if(element.value==id) {
						element.checked = false;
					}
				}
			);

			listing.submitFilter();
		},
		
		cancelAll: function () {
			let _brands = document.getElementsByClassName('lf-brand');
			Array.from(_brands).forEach(
				function(element) {
					element.checked = false;
				}
			);
		}
		
	};
	listing.filter.price = {
		toURL: function () {
			let price = {};
			let price_activated = false;

			let _price_min = document.getElementById('lf-price-min');
			if(_price_min) {
				let min = _price_min.dataset['min']*1;
				let s_min = _price_min.value*1;
				if(s_min>min) {
					price['min']= s_min;
					listing.URL.push('p_min='+s_min);
				}
			}



			let _price_max = document.getElementById('lf-price-max');
			if(_price_max) {
				let max = _price_max.dataset['max']*1;
				let s_max = _price_max.value*1;
				if(s_max<max) {
					price['max']= s_max;
					listing.URL.push('p_max='+s_max);
				}
			}
		},
		
		cancel: function() {
			let _price_min = document.getElementById('lf-price-min');
			if(_price_min) {
				_price_min.value = _price_min.dataset['min']*1;
			}

			let _price_max = document.getElementById('lf-price-max');
			if(_price_max) {
				_price_max.value=_price_max.dataset['max']*1;
			}
			listing.submitFilter();
		},
		
		cancelAll: function () {
			listing.filter.price.cancel();
		},
	};
	
	listing.UI = {
		opened: false,
		main_container_scroll: 0,
		filter_container_scroll: {},
		filter_item_states: {},
		sliders: [],
		
		initSliders: function () {
			listing.UI.sliders = [];
			let sliders = document.getElementsByClassName('dual-slider');
			Array.from(sliders).forEach(
				function (element) {
					listing.UI.sliders.push(
						new DualSlider(element)
					)
				}
			);
		},
		
		actualizeSliders: function () {
			for( let c=0;c<listing.UI.sliders.length;c++ ) {
				listing.UI.sliders[c].actualize();
			}
		},

		cancelFilter: function () {
			listing.UI.filter_item_states = {};
			listing.UI.opened = false;
			
			effects.fadeOut( 'product_listing_filter_area', 500 );
		},
		
		showFilter: function () {
			listing.UI.opened = true;
			
			effects.fadeIn('product_listing_filter_area', 500, () => {
				listing.UI.actualizeSliders();
			});
		},

		hideFilter: function () {
			listing.UI.opened = false;

			effects.fadeOut( 'product_listing_filter_area', 500 );
		},
		
		goToFilter: function ( filter ) {
			listing.UI.showFilter();
			
			for(let f in listing.UI.filter_item_states) {
				if(
					f!=filter &&
					listing.UI.filter_item_states[f]
				) {
					listing.UI.closeFilterItem( f );
				}
			}

			listing.UI.openFilterItem(filter, function () {
				effects.scrollTo( filter+'_title' );
			});
			
		},
		
		toggleFilterItem: function ( element ) {
			let filter = element.dataset['target'];
			if(listing.UI.filter_item_states[filter]===undefined) {
				listing.UI.filter_item_states[filter] = false;
			}
			
			if(listing.UI.filter_item_states[filter]) {
				listing.UI.closeFilterItem(filter);
			} else {
				listing.UI.openFilterItem(filter);
			}
		},
		
		openFilterItem: function( filter, onOpen ) {
			listing.UI.filter_item_states[filter] = true;
			
			effects.slideDown(filter, 'fast', () => {
				listing.UI.actualizeSliders();

				if(onOpen) {
					onOpen();
				}
			});

		},
		
		closeFilterItem: function( filter, onClose ) {
			listing.UI.filter_item_states[filter] = false;
			
			effects.slideUp(filter, 'fast', () => {
				if(onClose) {
					onClose();
				}
			});
		},
		
		resetState: function () {
			listing.UI.filter_item_states = {};
		},

		renewState: function() {
			if(listing.UI.opened) {
				visibility.show('product_listing_filter_area');
			}
			
			for(let filter in listing.UI.filter_item_states) {
				if(listing.UI.filter_item_states[filter]) {
					visibility.show(filter);
				}
			}

			for(let filter in listing.UI.filter_container_scroll) {
				document.getElementById(filter).scrollTop = listing.UI.filter_container_scroll[filter];
			}
			

			let container = document.getElementById( 'product_listing_filter' );
			container.scrollTop = listing.UI.main_container_scroll;

			listing.UI.initSliders();
		},

		mainContainerScroll: function ( container ) {
			listing.UI.main_container_scroll = container.scrollTop;
		},

		filterContainerScroll: function ( container ) {
			listing.UI.filter_container_scroll[container.id] = container.scrollTop;
		}
	};
	
	
	listing.init();
</script>
