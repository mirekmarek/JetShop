<?php
/**
 * @copyright Copyright (c) Miroslav Marek <mirek.marek@web-jet.cz>
 * @license EUPL 1.2  https://eupl.eu/1.2/en/
 * @author Miroslav Marek <mirek.marek@web-jet.cz>
 */
namespace JetApplicationModule\EShop\CashDesk;


use Jet\Http_Request;
use Jet\MVC_View;
use Jet\SysConf_URI;

/**
 * @var MVC_View $this
 * @var CashDesk $cash_desk
 */
$cash_desk = $this->getRaw('cash_desk');

$delivery_methods  = $cash_desk->getAvailableDeliveryMethods();
$marker_icons = [];

foreach( $delivery_methods as $method ) {
	if(
		$method->isPersonalTakeover() &&
		$method->isActive()
	) {
		$marker_icons[$method->getId()] = $method->getIcon2ThumbnailUrl( 60, 60 )?:'';
	}
}
?>
<script>
CashDesk.delivery.personalTakeover = {
	initialized: false,
	map_instance: null,
	marker_cluster_instance: null,
	markers: {},
	marker_icons: <?=json_encode($marker_icons)?>,

	map: {
		center: {
			lat: 0,
			lon: 0,
		},
		default_zoom: 0
	},
	
	whisperer: null,

	init: function() {
		if(CashDesk.delivery.personalTakeover.initialized) {
			return;
		}

		CashDesk.delivery.personalTakeover.map_instance = new google.maps.Map( document.getElementById('personal_takeover_map'),{});
		CashDesk.delivery.personalTakeover.map_instance.setCenter( new google.maps.LatLng(
			CashDesk.delivery.personalTakeover.map.center.lat,
			CashDesk.delivery.personalTakeover.map.center.lon
		) );
		CashDesk.delivery.personalTakeover.map_instance.setZoom(
			CashDesk.delivery.personalTakeover.map.default_zoom
		);

		CashDesk.delivery.personalTakeover.marker_cluster_instance = new MarkerClusterer(
			CashDesk.delivery.personalTakeover.map_instance,
			[],
			{imagePath: '<?=SysConf_URI::getImages()?>map/cluster/m'}
		);

		google.maps.event.addListener(CashDesk.delivery.personalTakeover.marker_cluster_instance, 'clusterclick', function(cluster, event) {

			if (cluster.getMarkers().length > 1) {
				const markers = cluster.getMarkers();
				let isOverlappedCluster = true;

				markers.slice(1).reduce(function (prevMarker, marker) {
					if (marker.getPosition().equals(prevMarker.getPosition()) === false) {
						isOverlappedCluster = false;
					}

					return marker;
				}, markers[0]);

				if (isOverlappedCluster) {
					markers[0].setPosition(new google.maps.LatLng(markers[0].getPosition().lat() + 0.00002, markers[0].getPosition().lng() + 0.00002))
				}
			}
		});



		if(navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function(position) {
				CashDesk.delivery.personalTakeover.map_instance.setCenter( new google.maps.LatLng(
					position.coords.latitude,
					position.coords.longitude
				) );
				CashDesk.delivery.personalTakeover.map_instance.setZoom(
					14
				);
			});
		}

		CashDesk.delivery.personalTakeover.initMapMarkers();
		CashDesk.delivery.personalTakeover.initWhisperer();
		CashDesk.delivery.personalTakeover.initialized = true;

	},

	initMapMarkers: async function () {
		for(let id in CashDesk.delivery.personalTakeover.markers ) {
			CashDesk.delivery.personalTakeover.markers[id].setMap(null);
		}

		CashDesk.delivery.personalTakeover.markers = {};
		CashDesk.delivery.personalTakeover.marker_cluster_instance.clearMarkers();

		const r = await fetch('?action=personal_takeover_get_map_data&methods='+CashDesk.delivery.personalTakeover.getSelectedMethods().join(','));
		const map_data = await r.json();
		
		for( let i in map_data ) {
			let d = map_data[i];
			let id = d['m']+':'+d['c'];
			
			
			let marker_data = {
				id: id,
				latitude: d['lt'],
				longitude: d['ln'],
				icon: CashDesk.delivery.personalTakeover.marker_icons[d['m']]
			};
			
			let marker_options= {};

			marker_options.title = marker_data.name;
			marker_options.position = new google.maps.LatLng(marker_data.latitude, marker_data.longitude);

			if(marker_data.icon) {
				marker_options.icon = new google.maps.MarkerImage(marker_data.icon);
			}

			let marker = new google.maps.Marker(marker_options);
			marker.marker_data = marker_data;

			marker.setMap( CashDesk.delivery.personalTakeover.map_instance );

			CashDesk.delivery.personalTakeover.markers[id] = marker;

			marker.addListener("click",  () => {

				CashDesk.delivery.personalTakeover.map_instance.setCenter(CashDesk.delivery.personalTakeover.markers[id].getPosition());
				CashDesk.delivery.personalTakeover.map_instance.setZoom(20);

				CashDesk.delivery.personalTakeover.showPlace( id );
			});

			CashDesk.delivery.personalTakeover.marker_cluster_instance.addMarker(
				marker,
				true
			);
		}

		CashDesk.delivery.personalTakeover.marker_cluster_instance.redraw();

	},

	selectMethod: function( id ) {

		let selected_all = true;
		let clicked_is_selected = false;

		document.querySelectorAll('.personal_takeover_method').forEach( (chb) => {
			let _id = chb.value;

			if(chb.checked) {
				if(_id==id) {
					clicked_is_selected = true;
				}
			} else {
				selected_all = false;
			}
		} );


		if(selected_all) {
			document.querySelectorAll('.personal_takeover_method').forEach( (chb) => {
				if(chb.value!=id) {
					chb.checked = false;
				}
			});
		} else {
			document.querySelectorAll('.personal_takeover_method').forEach( (chb) => {
				if(chb.value==id) {
					chb.checked = !clicked_is_selected;
				}
			});
		}

		if(CashDesk.delivery.personalTakeover.getSelectedMethods().length<1) {
			document.querySelectorAll('.personal_takeover_method').forEach( (chb) => {
				chb.checked = true;
			});
		}


		CashDesk.delivery.personalTakeover.initMapMarkers();
		CashDesk.delivery.personalTakeover.initWhisperer();

		event.stopPropagation();
	},

	actualizeMethodsSelection: function () {
		if(CashDesk.delivery.personalTakeover.getSelectedMethods().length<1) {
			document.querySelectorAll('.personal_takeover_method').forEach( (chb) => {
				chb.checked = true;
			});
		}

		CashDesk.delivery.personalTakeover.initMapMarkers();
		CashDesk.delivery.personalTakeover.initWhisperer();
	},


	getSelectedMethods: function() {
		let selected_methods = [];

		document.querySelectorAll('.personal_takeover_method').forEach( (chb) => {
			if(chb.checked) {
				selected_methods.push(chb.value);
			}
		});

		return selected_methods;
	},


	startSelection: function() {
		dialog.open('select_personal_takeover_point_dialog');


		CashDesk.delivery.personalTakeover.init();
	},

	showPlace: async function ( id ) {
		const r = await fetch('?action=personal_takeover_show_point&id='+id);
		const response = await r.text();
		
		document.getElementById('personal_takeover_point').innerHTML = response;
		dialog.open('select_personal_takeover_selected_point_dialog');
	},

	selectPoint: function( id ) {
		setTimeout(function () {
			CashDesk._request.doGet('?action=personal_takeover_select_point&id=' + id );
		}, 10);

		dialog.close('select_personal_takeover_point_dialog');
		dialog.close('select_personal_takeover_selected_point_dialog');

	},

	initWhisperer: function () {
		let URL = '<?=Http_Request::currentURL(['action'=>'whisper_point'])?>&methods='+CashDesk.delivery.personalTakeover.getSelectedMethods().join(',')+'&q=';
		
		if(CashDesk.delivery.personalTakeover.whisperer) {
			CashDesk.delivery.personalTakeover.whisperer.data_request_url = URL;

			return;
		}

		CashDesk.delivery.personalTakeover.whisperer = new Whisperer(
			'select_personal_takeover_point_search_input',
			'select_personal_takeover_point_search_result',
			URL
		);


		CashDesk.delivery.personalTakeover.whisperer.onLoad = function(items, whisperer) {

			let visible_markers = {};
			let count = 0;

			for(let i=0; i<items.length;i++) {
				let item=items[i];
				let id = item.dataset['id'];
				let type = item.dataset['type'];

				if(type==='place') {
					visible_markers[id] = true;
					count++;
				}
			}

			CashDesk.delivery.personalTakeover.marker_cluster_instance.clearMarkers();

			for(let marker_id in CashDesk.delivery.personalTakeover.markers ) {
				let marker = CashDesk.delivery.personalTakeover.markers[marker_id];

				if(count>0) {
					if(visible_markers[marker_id]) {
						marker.setMap( CashDesk.delivery.personalTakeover.map_instance );
						CashDesk.delivery.personalTakeover.marker_cluster_instance.addMarker( marker, true );
					} else {
						marker.setMap( null );
					}
				} else {
					marker.setMap( CashDesk.delivery.personalTakeover.map_instance );
					CashDesk.delivery.personalTakeover.marker_cluster_instance.addMarker( marker, true );
				}
			}

			CashDesk.delivery.personalTakeover.marker_cluster_instance.redraw();

		};

		CashDesk.delivery.personalTakeover.whisperer.onHide = function( whisperer ) {

			if( whisperer.input_field.value.length ) {
				return;
			}

			CashDesk.delivery.personalTakeover.marker_cluster_instance.clearMarkers();

			for(let marker_id in CashDesk.delivery.personalTakeover.markers ) {
				let marker = CashDesk.delivery.personalTakeover.markers[marker_id];
				marker.setMap( CashDesk.delivery.personalTakeover.map_instance );
				CashDesk.delivery.personalTakeover.marker_cluster_instance.addMarker( marker, true );
			}

			CashDesk.delivery.personalTakeover.marker_cluster_instance.redraw();

		};


		CashDesk.delivery.personalTakeover.whisperer.onItemSelect = function(  item_node, whisperer  ) {
			whisperer.hide();
			whisperer.input_field.blur();
			let type = item_node.dataset['type'];

			if(type==='place') {
				CashDesk.delivery.personalTakeover.showPlace(item_node.dataset['id']);
			}
		};

		
		CashDesk.delivery.personalTakeover.whisperer.init();

	},

	resetSearch: function() {
		document.getElementById('select_personal_takeover_point_search_input').value = '';
		CashDesk.delivery.personalTakeover.whisperer.hide();
	}
	

};
</script>
